#+TITLE: Displaimer Teknisk Dokumentation: Schemaläggare
#+OPTIONS: toc:nil ':t
#+AUTHOR: Teo Klestrup Röijezon <teo@nullable.se>
#+LANGUAGE: sv
# Svenska rubriker
#+LATEX_HEADER: \usepackage[swedish]{babel}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{minted}

#+BEGIN_SRC emacs-lisp :exports results :results silent
  (setq org-ditaa-jar-path "ditaa.jar"
        org-plantuml-jar-path "plantuml.jar"
        org-latex-listings 'minted
        org-latex-pdf-process
        '("%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "%latex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
           (ditaa . t)
           (plantuml . t))))
#+END_SRC

#+RESULTS:

#+BEGIN_abstract
Schemaläggaren är komponenten i systemet som kommunicerar med displayenheten, och
bestämmer vad som ska visas när. Detta dokument behandlar först det [[#interface][externa gränssnittet]], och
sedan [[#implementation][implementationen]].

Dokumentet är riktat mot en någorlunda teknisk person som antingen skriver en egen displayenhet,
vill använda API:t för att schemalägga meddelanden, eller som ska underhålla schemaläggaren i
framtiden. Dessutom är kapitlen om [[#dependencies][beroenden]] och [[#startup][uppstart]] relevanta för någon som ska underhålla
servern i produktion.
#+END_abstract

#+TOC: headlines 4

\pagebreak

* Gränssnitt
  :PROPERTIES:
  :CUSTOM_ID: interface
  :END:

** Beroenden
   :PROPERTIES:
   :CUSTOM_ID: dependencies
   :END:

   Schemaläggaren kräver att du har en Java 8 (eller nyare) JVM[fn::Java Virtual Machine],
   och [[https://libsodium.org][Sodium]] installerade. För att kunna kompilera behöver du
   också ha en JDK[fn::Java Developer Kit], [[https://scala.sbt.org][SBT]], och [[https://nodejs.org][Node.js]]
   installerade. Andra beroenden tillfredställs automatiskt av SBT.

   Du måste även skapa en tom PostgreSQL-databas vid namn "wilcd", som
   den nuvarande användaren har åtkomst till. Om databasen heter något annat,
   eller finns på en annan server, uppdatera "wilcd-ui/conf/application.conf".

** Uppstart
   :PROPERTIES:
   :CUSTOM_ID: startup
   :END:

   Schemaläggaren är en komponent i webbapplikationen, och båda startas tillsammans. För att
   starta webbapplikationen i utvecklingsläget, kör följande kommando från mappen "wilcd-ui":

   #+BEGIN_SRC bash
   $ sbt run
   #+END_SRC

   För att skapa ett Debian-paket, kör följande:

   #+BEGIN_SRC bash
   $ sbt debian:packageBin
   #+END_SRC

   Notera att du måste öppna webbplatsen (http://localhost:9000/) för att starta schemaläggaren
   i utvecklingsläget, men det krävs inte för Debian-paketet.

** Mot Displayenheten
   :PROPERTIES:
   :CUSTOM_ID: interface-display
   :END:
   Schemaläggaren lyssnar på TCP-porten 9797, och använder ett textbaserat format, kodat enligt ISO 8859-1.
   Varje rad är ett paket, där första tecknet är indikerar paketets typ, och resten är paketets
   innehåll. För närvarande är följande typer definierade:

   |     | <90>                                                                                       |
   | Typ | Innehåll                                                                                   |
   |-----+--------------------------------------------------------------------------------------------|
   | M   | Ett nytt meddelande att visa på displayenheten                                             |
   | T   | Den nuvarande tiden[fn::I den lokala tidszonen, för närvarande alltid Europe/Stockholm.], används för att kalibrera displayenhetens klocka |

   All mottagen text ignoreras, och det är tillåtet att ansluta flera gånger. Alla meddelanden skickas
   till alla klienter.

** Mot Systemet
   :PROPERTIES:
   :CUSTOM_ID: interface-internal
   :END:
   Det rekommenderade gränssnittet är via schemaläggarens implementation av MessageUpdater,
   med följande viktiga metoder:

   |                 | <80>                                                                             |
   | Metod           | Beskrivning                                                                      |
   |-----------------+----------------------------------------------------------------------------------|
   | scheduleMessage | Planerar att ett meddelande ska visas                                            |
   | deleteMessage   | Raderar ett ntUML packages on your system.                                       |
   | getMessage      | Hämta det aktuella meddelandet som visas                                         |
   | getNextMessage  | Nästa meddelande som ska visas[fn::Det finns ingen garanti för att detta meddelande någonsin kommer visas, använd bara detta för att gissa när displayen behöver uppdateras] |

   Om detta gränssnitt används så hålls schemaläggaren automatiskt uppdaterad.

   Prioriteringen av meddelanden är [[#message-priority][implementationsdefinierad]].

*** Direkt Databasåtkomst
    Om större kontroll behövs så kan man skriva till databasen direkt. Databasen
    initieras automatiskt när [[#startup][schemaläggaren startas]]. Följande utdrag ur databasen
    används av schemaläggaren:

    #+BEGIN_SRC ditaa :file schemalaggare_databas.png :cmdline -r
      +---------------------------+                 +--------------+
      | messages                  |                 | users        |
      |---------------------------|                 |--------------|
      | id:            SERIAL     |         +------>+ id:   SERIAL |
      |----                       |         |       |----          |
      | created_by:    INTEGER    +---------+       +--------------+
      | display_from:  TIMESTAMP  |
      | display_until: TIMESTAMP  |
      | display_from   TEXT       |
      | occurrence:    OCCURRENCE |
      +---------------------------+
    #+END_SRC

    Där OCCURRENCE är någon av Once, Daily, Weekly, Monthly, eller Yearly. Alla TIMESTAMPs lagras i UTC.

    Efter att databasens innehåll ändrats så *måste* du skicka meddelandet "DbMessageFetcher.Refresh"
    till instansen av DbMessageFetcher (injiceras av Guice som en ActorRef med namnet
    "db-message-fetcher"). Se exempel nedan:

    #+BEGIN_SRC scala
      import actors.DbMessageFetcher
      import akka.actor.ActorRef
      import javax.inject.{Inject, Named}
      class MyClass @Inject() (
        @Named("db-message-fetcher") dbMessageFetcher: ActorRef) {
        def doStuff(): Unit = {
          // Lek runt i databasen
          dbMessageFetcher ! DbMessageFetcher.Refresh
        }
      }
    #+END_SRC

    Vid åtkomst från Scala rekommenderas det att återanvända tabelldefinitionerna i paketet "models", i
    stället för att skriva SQL-frågor för hand.

    #+BEGIN_SRC plantuml :file schemalaggare_databas_seq.png
    actor Användare
    participant Schemaläggare
    database Databas
    participant Display

    activate Användare
    Användare -> Databas : Skapa meddelande
    activate Databas
    Databas --> Användare : OK
    deactivate Databas
    Användare -> Schemaläggare : Updatera
    deactivate Användare
    activate Schemaläggare
    Schemaläggare -> Databas : Hämta aktuellt meddelande
    activate Databas
    Databas --> Schemaläggare : OK
    deactivate Databas
    Schemaläggare -> Display : Uppdatera meddelande
    deactivate Schemaläggare
    #+END_SRC

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

** Koncept

*** Prioritering av Meddelanden
    :PROPERTIES:
    :CUSTOM_ID: message-priority
    :END:
    Meddelanden prioriteras genom att ta alla meddelanden, filtrera bort alla
    som inte är aktuella (display\textunderscore{}from har inte hänt än, eller display\textunderscore{}until
    har redan hänt), och sedan väljs meddelandet med högst display\textunderscore{}from.

*** Hantering av Upprepade Meddelanden
    Innan meddelanden hämtas så gör vi först en sökning efter meddelanden där occurrence inte är Once,
    och där display\textunderscore{}from redan har passerat. Dessa meddelanden kopieras framåt i tiden
    (display\textunderscore{}from och display\textunderscore{}until ökas båda med t.ex. 1 dag för Daily),
    och för det gamla meddelandet ändras sedan occurrence till Once. För att undvika att meddelanden dubbleras
    så låses dessa rader under operationen.

*** Automatisk Uppdatering
    :PROPERTIES:
    :CUSTOM_ID: display-auto-updates
    :END:
    Schemaläggaren försöker att automatiskt uppdatera displayen när det aktuella meddelandet ändras.
    Detta sker genom att titta på det nuvarande meddelandets display\textunderscore{}until, och nästa
    meddelandes (dvs meddelandet efter det nuvarande enligt [[#message-priority]])
    display\textunderscore{}from, och schemalägga en Refresh för den tidigare av de två händelserna.

    Därför måste en manuell Refresh skickas om nästa ändring planeras om till att ske tidigare. Det behövs
    tekniskt sett inte ifall ändringen i stället senareläggs, men det rekommenderas ändå att skicka
    meddelandet för att undvika buggar.

** Organisation
   Schemaläggarens kod ligger tillsammans med webbplatsen i paketen [[#actors]["actors"]], [[#models]["models"]],
   och [[#services]["services"]].

*** Models
    :PROPERTIES:
    :CUSTOM_ID: models
    :END:
    Models innehåller den interna koden som kommunicerar med databasen.

*** Actors
    :PROPERTIES:
    :CUSTOM_ID: actors
    :END:
    Actors innehåller bakgrundstjänsterna.

    - DbMessageFetcher :: Väljer det aktuella meddelandet och skickar det vidare
         till TcpDisplayUpdater. Försöker förutsäga när displayen ska uppdateras, se [[#display-auto-updates]].
    - TcpDisplayUpdater :: Kommunicerar med displayenheten, se [[#interface-display]] för mer
         detaljer. Vid anslutning skickar den den aktuella tiden och det senaste meddelandet,
         och sedan skickar den det nya meddelandet varje gång det ändras.

*** Services
    :PROPERTIES:
    :CUSTOM_ID: services
    :END:
    Services innehåller det externa gränssnittet, som webbplatsen kommunicerar med.
    Se [[#interface-internal]] för användningsinformation.

    - MessageUpdaterDatabase :: Den aktuella implementationen av MessageUpdater som arbetar mot modellen.

    - MessageUpdaterNoop :: Minimal MessageUpdater som kan användas vid tester utan att behöva en
         PostgreSQL-databas. Den bahandlas inte i detta dokument.
